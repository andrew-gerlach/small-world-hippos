{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/andrew-gerlach/small-world-hippos/blob/peter/load_chp.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oIvhc_R1D6k1"
   },
   "source": [
    "# Human Connectome Project (HCP) Dataset loader\n",
    "\n",
    "The HCP dataset comprises resting-state and task-based fMRI from a large sample of human subjects. The NMA-curated dataset includes time series data that has been preprocessed and spatially-downsampled by aggregating within 360 regions of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "fXIw61Dk-M5E"
   },
   "outputs": [],
   "source": [
    "#@title Module Loading\n",
    "# Check if GPU is available\n",
    "from tensorflow.python.client import device_lib\n",
    "runtime = device_lib.list_local_devices()[0].device_type\n",
    "\n",
    "# Data modules\n",
    "import numpy as np\n",
    "if runtime == \"GPU\":\n",
    "  import cupy as cp\n",
    "else:\n",
    "  cp = None\n",
    "import pandas as pd\n",
    "import nibabel as nib\n",
    "import colab\n",
    "\n",
    "# Plotting modules\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Graph theory modules\n",
    "import networkx as nx\n",
    "import community\n",
    "\n",
    "# Stats modules\n",
    "import scipy as sc\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# python modules\n",
    "import functools as func\n",
    "import operator as op\n",
    "import os\n",
    "\n",
    "#pip installs\n",
    "!pip install nilearn --quiet\n",
    "from nilearn import plotting, datasets\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "4eJOYQqgSMKV"
   },
   "outputs": [],
   "source": [
    "#@title Figure settings\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "plt.style.use(\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content/master/nma.mplstyle\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CSdEhS5jKzkb"
   },
   "source": [
    "# Basic parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "oL4crLoCzkzk"
   },
   "outputs": [],
   "source": [
    "#@title Run to load basic parameters\n",
    "# The download cells will store the data in nested directories starting here:\n",
    "HCP_DIR = \"./hcp\"\n",
    "if not os.path.isdir(HCP_DIR):\n",
    "  os.mkdir(HCP_DIR)\n",
    "\n",
    "# The data shared for NMA projects is a subset of the full HCP dataset\n",
    "N_SUBJECTS = 339\n",
    "\n",
    "# The data have already been aggregated into ROIs from the Glasesr parcellation\n",
    "N_PARCELS = 360\n",
    "\n",
    "# The acquisition parameters for all tasks were identical\n",
    "TR = 0.72  # Time resolution, in sec\n",
    "\n",
    "# The parcels are matched across hemispheres with the same order\n",
    "HEMIS = [\"Right\", \"Left\"]\n",
    "\n",
    "# Each experiment was repeated multiple times in each subject\n",
    "N_RUNS_REST = 4\n",
    "N_RUNS_TASK = 2\n",
    "\n",
    "#NBACK number of frames per run\n",
    "FRAMES_PER_RUN = 405\n",
    "\n",
    "# Time series data are organized by experiment, with each experiment\n",
    "# having an LR and RL (phase-encode direction) acquistion\n",
    "BOLD_NAMES = [\n",
    "  \"rfMRI_REST1_LR\", \"rfMRI_REST1_RL\",\n",
    "  \"rfMRI_REST2_LR\", \"rfMRI_REST2_RL\",\n",
    "  \"tfMRI_MOTOR_RL\", \"tfMRI_MOTOR_LR\",\n",
    "  \"tfMRI_WM_RL\", \"tfMRI_WM_LR\",\n",
    "  \"tfMRI_EMOTION_RL\", \"tfMRI_EMOTION_LR\",\n",
    "  \"tfMRI_GAMBLING_RL\", \"tfMRI_GAMBLING_LR\",\n",
    "  \"tfMRI_LANGUAGE_RL\", \"tfMRI_LANGUAGE_LR\",\n",
    "  \"tfMRI_RELATIONAL_RL\", \"tfMRI_RELATIONAL_LR\",\n",
    "  \"tfMRI_SOCIAL_RL\", \"tfMRI_SOCIAL_LR\"\n",
    "]\n",
    "\n",
    "# You may want to limit the subjects used during code development.\n",
    "# This will use all subjects:\n",
    "subjects = range(N_SUBJECTS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ErP_ocaxK9FU"
   },
   "source": [
    "# Downloading data\n",
    "\n",
    "The rest and task data are shared in different files, but they will unpack into the same directory structure.\n",
    "\n",
    "Each file is fairly large and will take some time to download. If you are focusing only on rest or task analyses, you may not want to download only that dataset.\n",
    "\n",
    "We also separately provide some potentially useful behavioral covariate information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "5Lh1SEyZ_Kdh"
   },
   "outputs": [],
   "source": [
    "#@title Get Rest Data\n",
    "fname = \"hcp_rest.tgz\"\n",
    "if not os.path.exists(fname):\n",
    "  !wget -qO $fname https://osf.io/bqp7m/download/\n",
    "  !tar -xzf $fname -C $HCP_DIR --strip-components=1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8b6db44",
   "metadata": {},
   "source": [
    "<span style=\"color:red\">**<<<<<<< local**</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "5ubuyGN7siwI"
   },
   "outputs": [],
   "source": [
    "#@title Get task data, covariates, and atlas\n",
    "fname = \"hcp_task.tgz\"\n",
    "if not os.path.exists(fname):\n",
    "  !wget -qO $fname https://osf.io/s4h8j/download/\n",
    "  !tar -xzf $fname -C $HCP_DIR --strip-components=1\n",
    "\n",
    "fname = \"hcp_covariates.tgz\"\n",
    "if not os.path.exists(fname):\n",
    "  !wget -qO $fname https://osf.io/x5p4g/download/\n",
    "  !tar -xzf $fname -C $HCP_DIR --strip-components=1\n",
    "\n",
    "fname = f\"{HCP_DIR}/atlas.npz\"\n",
    "if not os.path.exists(fname):\n",
    "  !wget -qO $fname https://osf.io/j5kuc/download"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1d43be7",
   "metadata": {},
   "source": [
    "<span style=\"color:red\">**=======**</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5ubuyGN7siwI"
   },
   "outputs": [],
   "source": [
    "fname = \"hcp_task.tgz\"\n",
    "if not os.path.exists(fname):\n",
    "  !wget -qO $fname https://osf.io/s4h8j/download/\n",
    "  !tar -xzf $fname -C $HCP_DIR --strip-components=1\n",
    "\n",
    "fname = \"hcp_covariates.tgz\"\n",
    "if not os.path.exists(fname):\n",
    "  !wget -qO $fname https://osf.io/x5p4g/download/\n",
    "  !tar -xzf $fname -C $HCP_DIR --strip-components=1\n",
    "\n",
    "fname = f\"{HCP_DIR}/atlas.npz\"\n",
    "if not os.path.exists(fname):\n",
    "  !wget -qO $fname https://osf.io/j5kuc/download"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "545ecd5a",
   "metadata": {},
   "source": [
    "<span style=\"color:red\">**>>>>>>> remote**</span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HaF8v-UBTcxq"
   },
   "source": [
    "## Loading region information\n",
    "\n",
    "Downloading either dataset will create the `regions.npy` file, which contains the region name and network assignment for each parcel.\n",
    "\n",
    "Detailed information about the name used for each region is provided [in the Supplement](https://static-content.springer.com/esm/art%3A10.1038%2Fnature18933/MediaObjects/41586_2016_BFnature18933_MOESM330_ESM.pdf) to [Glasser et al. 2016](https://www.nature.com/articles/nature18933).\n",
    "\n",
    "Information about the network parcellation is provided in [Ji et al, 2019](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6289683/)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "o5_wD8BMbSwz"
   },
   "outputs": [],
   "source": [
    "regions = np.load(f\"{HCP_DIR}/regions.npy\").T\n",
    "region_info = dict(\n",
    "    name=regions[0].tolist(),\n",
    "    network=regions[1],\n",
    "    myelin=regions[2].astype(np.float),)\n",
    "\n",
    "# Load github directory for access to Glasser atlas file\n",
    "!git clone https://github.com/andrew-gerlach/small-world-hippos.git\n",
    "# Load Glasser atlas\n",
    "glasser_atlas = nib.load('small-world-hippos/MMP_in_MNI_corr.nii')\n",
    "img = glasser_atlas.get_fdata()\n",
    "# Renumber to be continuous from 1 to 360 (right is 1-180, left is 201-380 in original atlas)\n",
    "for i in range(201,381):\n",
    "  img[img == i] = i-20\n",
    "  \n",
    "# Initialize storage for list of nodes in each network\n",
    "unique_networks = np.unique(region_info['network'])\n",
    "nNet = len(unique_networks)          # number of networks\n",
    "network_regions = {}                 # initialize\n",
    "for net in unique_networks:\n",
    "  network_regions[net] = []\n",
    "\n",
    "# Populate lists and extract node volume\n",
    "nodeVol = np.zeros(N_PARCELS)\n",
    "for i in range(N_PARCELS):\n",
    "  nodeVol[i] = np.sum(img == (i+1))\n",
    "  network_regions[region_info['network'][i]].append(region_info['name'][i])\n",
    "\n",
    "with np.load(f\"{HCP_DIR}/atlas.npz\") as dobj:\n",
    "  atlas = dict(**dobj)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZUmm7gjhNBVF"
   },
   "source": [
    "We also provide the [parcellation on the fsaverage5 surface](https://figshare.com/articles/HCP-MMP1_0_projected_on_fsaverage/3498446) and approximate MNI coordinates of each region, which can be useful for visualization:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NYDxvWrbIxxk"
   },
   "source": [
    "# Helper functions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "gf0UQI9UfiZB"
   },
   "outputs": [],
   "source": [
    "#@title GPU Utils\n",
    "#@markdown Run this to prevent errors in functions that use GPU\n",
    "\n",
    "def get_array_mod(arr):\n",
    "  if cp:\n",
    "    return cp.get_array_mod(arr)\n",
    "  else:\n",
    "    return np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "pnq7H5h_IxLi"
   },
   "outputs": [],
   "source": [
    "#@title Data Loading\n",
    "#@markdown Run to get functions related to data loading:\n",
    "#@markdown\n",
    "#@markdown ```\n",
    "#@markdown load_timeseries(subject, name, runs=None, concat=True, remove_mean=True)\n",
    "#@markdown load_condition(name, mod=np)\n",
    "#@markdown ```\n",
    "def get_image_ids(name):\n",
    "  \"\"\"Get the 1-based image indices for runs in a given experiment.\n",
    "\n",
    "    Args:\n",
    "      name (str) : Name of experiment (\"rest\" or name of task) to load\n",
    "    Returns:\n",
    "      run_ids (list of int) : Numeric ID for experiment image files\n",
    "\n",
    "  \"\"\"\n",
    "  run_ids = [\n",
    "    i for i, code in enumerate(BOLD_NAMES, 1) if name.upper() in code\n",
    "  ]\n",
    "  if not run_ids:\n",
    "    raise ValueError(f\"Found no data for '{name}''\")\n",
    "  return run_ids\n",
    "\n",
    "def load_timeseries(subject, name, runs=None, concat=True, remove_mean=True):\n",
    "  \"\"\"Load timeseries data for a single subject.\n",
    "  \n",
    "  Args:\n",
    "    subject (int): 0-based subject ID to load\n",
    "    name (str) : Name of experiment (\"rest\" or name of task) to load\n",
    "    run (None or int or list of ints): 0-based run(s) of the task to load,\n",
    "      or None to load all runs.\n",
    "    concat (bool) : If True, concatenate multiple runs in time\n",
    "    remove_mean (bool) : If True, subtract the parcel-wise mean\n",
    "\n",
    "  Returns\n",
    "    ts (n_parcel x n_tp array): Array of BOLD data values\n",
    "\n",
    "  \"\"\"\n",
    "  # Get the list relative 0-based index of runs to use\n",
    "  if runs is None:\n",
    "    runs = range(N_RUNS_REST) if name == \"rest\" else range(N_RUNS_TASK)\n",
    "  elif isinstance(runs, int):\n",
    "    runs = [runs]\n",
    "\n",
    "  # Get the first (1-based) run id for this experiment \n",
    "  offset = get_image_ids(name)[0]\n",
    "\n",
    "  # Load each run's data\n",
    "  bold_data = [\n",
    "      load_single_timeseries(subject, offset + run, remove_mean) for run in runs\n",
    "  ]\n",
    "\n",
    "  # Optionally concatenate in time\n",
    "  if concat:\n",
    "    bold_data = np.concatenate(bold_data, axis=-1)\n",
    "\n",
    "  return bold_data\n",
    "\n",
    "\n",
    "def load_single_timeseries(subject, bold_run, remove_mean=True):\n",
    "  \"\"\"Load timeseries data for a single subject and single run.\n",
    "  \n",
    "  Args:\n",
    "    subject (int): 0-based subject ID to load\n",
    "    bold_run (int): 1-based run index, across all tasks\n",
    "    remove_mean (bool): If True, subtract the parcel-wise mean\n",
    "\n",
    "  Returns\n",
    "    ts (n_parcel x n_timepoint array): Array of BOLD data values\n",
    "\n",
    "  \"\"\"\n",
    "  bold_path = f\"{HCP_DIR}/subjects/{subject}/timeseries\"\n",
    "  bold_file = f\"bold{bold_run}_Atlas_MSMAll_Glasser360Cortical.npy\"\n",
    "  ts = np.load(f\"{bold_path}/{bold_file}\")\n",
    "  if remove_mean:\n",
    "    ts -= ts.mean(axis=1, keepdims=True)\n",
    "  return ts\n",
    "\n",
    "def load_evs(subject, name, condition):\n",
    "  \"\"\"Load EV (explanatory variable) data for one task condition.\n",
    "\n",
    "  Args:\n",
    "    subject (int): 0-based subject ID to load\n",
    "    name (str) : Name of task\n",
    "    condition (str) : Name of condition\n",
    "\n",
    "  Returns\n",
    "    evs (list of dicts): A dictionary with the onset, duration, and amplitude\n",
    "      of the condition for each run.\n",
    "\n",
    "  \"\"\"\n",
    "  evs = []\n",
    "  for id in get_image_ids(name):\n",
    "    task_key = BOLD_NAMES[id - 1]\n",
    "    ev_file = f\"{HCP_DIR}/subjects/{subject}/EVs/{task_key}/{condition}.txt\"\n",
    "    ev_array = np.loadtxt(ev_file, ndmin=2, unpack=True)\n",
    "    ev = dict(zip([\"onset\", \"duration\", \"amplitude\"], ev_array))\n",
    "    evs.append(ev)\n",
    "  return evs\n",
    "\n",
    "def load_condition(name, mod=np):\n",
    "  \"\"\"\n",
    "  Load all timeseries for a given condition as a 3D numpy array:\n",
    "    (n_subjects x n_parcels x n_timepoints)\n",
    "  Possible conditions include \"rest\", \"wm\", etc. Can return results as either\n",
    "  a numpy or cupy array\n",
    "\n",
    "  Args:\n",
    "    name (str) : Condition to \n",
    "    mod (numpy/cupy module) : Module to use for forming the array\n",
    "  \n",
    "  Returns:\n",
    "    ts (sub x parcels x timepoints) : Array of BOLD datapoints\n",
    "  \"\"\"\n",
    "  assert mod is np or mod is cp, \"Use either numpy (np) or cupy (cp) as mod\"\n",
    "  if mod is cp and cp:\n",
    "    return cp.array([cp.asarray(load_timeseries(subject, name)) for subject in subjects])\n",
    "  return mod.array([load_timeseries(subject, name) for subject in subjects])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qQzCA99sMryW"
   },
   "source": [
    "## Task-based analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HgnEuN0gMqxP"
   },
   "outputs": [],
   "source": [
    "def condition_frames(run_evs, skip=0):\n",
    "  \"\"\"Identify timepoints corresponding to a given condition in each run.\n",
    "\n",
    "  Args:\n",
    "    run_evs (list of dicts) : Onset and duration of the event, per run\n",
    "    skip (int) : Ignore this many frames at the start of each trial, to account\n",
    "      for hemodynamic lag\n",
    "\n",
    "  Returns:\n",
    "    frames_list (list of 1D arrays): Flat arrays of frame indices, per run\n",
    "\n",
    "  \"\"\"\n",
    "  frames_list = []\n",
    "  for ev in run_evs:\n",
    "\n",
    "    # Determine when trial starts, rounded down\n",
    "    start = np.floor(ev[\"onset\"] / TR).astype(int)\n",
    "\n",
    "    # Use trial duration to determine how many frames to include for trial\n",
    "    duration = np.ceil(ev[\"duration\"] / TR).astype(int)\n",
    "\n",
    "    # Take the range of frames that correspond to this specific trial\n",
    "    frames = [s + np.arange(skip, d) for s, d in zip(start, duration)]\n",
    "\n",
    "    frames_list.append(np.concatenate(frames))\n",
    "\n",
    "  return frames_list\n",
    "\n",
    "\n",
    "def selective_average(timeseries_data, ev, skip=0):\n",
    "  \"\"\"Take the temporal mean across frames for a given condition.\n",
    "\n",
    "  Args:\n",
    "    timeseries_data (array or list of arrays): n_parcel x n_tp arrays\n",
    "    ev (dict or list of dicts): Condition timing information\n",
    "    skip (int) : Ignore this many frames at the start of each trial, to account\n",
    "      for hemodynamic lag\n",
    "\n",
    "  Returns:\n",
    "    avg_data (1D array): Data averagted across selected image frames based\n",
    "    on condition timing\n",
    "\n",
    "  \"\"\"\n",
    "  # Ensure that we have lists of the same length\n",
    "  if not isinstance(timeseries_data, list):\n",
    "    timeseries_data = [timeseries_data]\n",
    "  if not isinstance(ev, list):\n",
    "    ev = [ev]\n",
    "  if len(timeseries_data) != len(ev):\n",
    "    raise ValueError(\"Length of `timeseries_data` and `ev` must match.\")\n",
    "\n",
    "  # Identify the indices of relevant frames\n",
    "  frames = condition_frames(ev, skip)\n",
    "\n",
    "  # Select the frames from each image\n",
    "  selected_data = []\n",
    "  for run_data, run_frames in zip(timeseries_data, frames):\n",
    "    run_frames = run_frames[run_frames < run_data.shape[1]]\n",
    "    selected_data.append(run_data[:, run_frames])\n",
    "\n",
    "  # Take the average in each parcel\n",
    "  avg_data = np.concatenate(selected_data, axis=-1).mean(axis=-1)\n",
    "\n",
    "  return avg_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RKOzUn2iPnQL"
   },
   "source": [
    "# Task analyses\n",
    "\n",
    "Description of each task, task timing, and conditions is located [here](https://protocols.humanconnectome.org/HCP/3T/task-fMRI-protocol-details.html).\n",
    "\n",
    "These are the condition names for each task:\n",
    "\n",
    "```\n",
    "- MOTOR: cue, lf, lh, rf, rh, t\n",
    "- WM:\n",
    "    0bk_body, 0bk_faces, 0bk_nir, 0bk_placed, 0bk_tools, \n",
    "    2bk_body, 2bk_faces, 2bk_nir, 2bk_placed, 2bk_tools,\n",
    "    0bk_cor, 0bk_err,\n",
    "    2bk_cor, 2bk_err,\n",
    "    all_bk_cor, all_bk_err\n",
    "- EMOTION: feat, neutral\n",
    "- GAMBLING: loss, loss_event, win, win_event, neut_event\n",
    "- LANGUAGE:\n",
    "    cue,\n",
    "    math, story\n",
    "    present_math, present_story,\n",
    "    question_math, question_story,\n",
    "    response_math, response_story\n",
    "- RELATIONAL: error, match, relation\n",
    "- SOCIAL: mental_resp, mental, other_resp, rnd\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qDu9nti5lNmo"
   },
   "outputs": [],
   "source": [
    "#times = load_condition('rest', cp)\n",
    "\n",
    "group_fc = cp.asnumpy(graph_threshold(times, 2).mean(axis=0))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "vaVRRo2jjCVX"
   },
   "outputs": [],
   "source": [
    "times = cp.array(timeseries_rest)\n",
    "\n",
    "group_fc = cp.asnumpy(graph_threshold(times, 100).mean(axis=0))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Uy1e8PnWtjG3"
   },
   "outputs": [],
   "source": [
    "pd_mean = pd.DataFrame(group_fc)\n",
    "plt.imshow(pd_mean, interpolation=\"none\", cmap=\"Greens\", vmin=0, vmax=1)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PFS04-5sQDyz"
   },
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "def make_subgraphs(np_matrix, region_info):\n",
    "  network_members = defaultdict(list)\n",
    "  for net, name in zip(region_info[\"network\"], region_info[\"name\"]):\n",
    "    network_members[net].append(name)\n",
    "\n",
    "\n",
    "class FC_graph:\n",
    "\n",
    "  # Nodal properties\n",
    "  WEIGHT = \"weight\"\n",
    "  STRENGTH = \"strength\"\n",
    "  STRENGTHNORM = \"strengthnorm\"\n",
    "  DISTANCE = \"distance\"\n",
    "  CLOSENESS = \"closeness\"\n",
    "  \n",
    "  def __init__(self, np_matrix, region_info):\n",
    "    self.data = np_matrix\n",
    "    self.G = self._prepare_graph(np_matrix, region_info[\"name\"])\n",
    "    self.region_info = region_info\n",
    "    self.names = self.region_info[\"name\"]\n",
    "    self.networks = self.region_info[\"network\"]\n",
    "\n",
    "    # Compute subgraphs\n",
    "    network_members = defaultdict(list)\n",
    "    for net, name in zip(region_info[\"network\"], region_info[\"name\"]):\n",
    "      network_members[net].append(name)\n",
    "    self.sub_G = { net: self.G.subgraph(members).copy()\n",
    "                     for net, members in network_members.items() }\n",
    "\n",
    "    self._compute_graph_attributes(self.G)\n",
    "    [self._compute_graph_attributes(G) for G in self.sub_G.values()]\n",
    "\n",
    "  def _prepare_graph(self, np_matrix, names):\n",
    "    G = nx.from_numpy_matrix(np_matrix)\n",
    "    G.remove_edges_from(list(nx.selfloop_edges(G)))\n",
    "    G = nx.relabel_nodes(G, dict(enumerate(names)))\n",
    "\n",
    "  def _compute_graph_attributes(self, G):\n",
    "    self._compute_degree(G)\n",
    "    self._compute_distance(G)\n",
    "\n",
    "  def _compute_degree(self, G):\n",
    "    strength = G.degree(weight=self.WEIGHT)\n",
    "    strengths = dict(strength)\n",
    "    nx.set_node_attributes(G, strengths, self.STRENGTH) # Add as nodal attribute\n",
    "\n",
    "    # Normalized node strength values 1/N-1\n",
    "    normstrenghts = {node: val * 1/(len(G.nodes)-1) for (node, val) in strength}\n",
    "    nx.set_node_attributes(G, normstrenghts, self.STRENGTHNORM)\n",
    "  \n",
    "  def _compute_distance(self, G):\n",
    "    # The function accepts a argument 'distance' that, in correlation-based \n",
    "    # networks, must be seen as the inverse of the weight value. Thus, a high\n",
    "    # correlation value (e.g., 0.8) means a shorter distance (i.e., 0.2).\n",
    "    G_distance_dict = {(e1, e2): 1 / abs(weight) for e1, e2, weight in G.edges(data=self.WEIGHT)}\n",
    "\n",
    "    # Then add them as attributes to the graph edges\n",
    "    nx.set_edge_attributes(self.G, G_distance_dict, self.DISTANCE)\n",
    "\n",
    "\n",
    "  def _node_subnet(self, node):\n",
    "    return dict(zip(self.names, self.networks))[node]\n",
    "\n",
    "  def get_subgraphs(self, region_info):\n",
    "    network_members = defaultdict(list)\n",
    "    for net, name in zip(region_info[\"network\"], region_info[\"name\"]):\n",
    "      network_members[net].append(name)\n",
    "\n",
    "    names = np.array(region_info[\"name\"])\n",
    "    for region in network_members:\n",
    "      indices = np.where(names in )\n",
    "    \n",
    "    return = { net: self.G.subgraph(members).copy()\n",
    "                     for net, members in network_members.items() }\n",
    "\n",
    "\n",
    "\n",
    "  def node_degree(self, node, subnet=False):\n",
    "    G = self._node_subnet(node) if subnet else self.G\n",
    "    return nx.get_node_attributes(G, self.STRENGTHNORM)[node]\n",
    "\n",
    "  def mean_degree(self, subnet=None):\n",
    "    G = subnet if subnet else self.G\n",
    "    strengths = nx.get_node_attributes(G, self.STRENGTHNORM).values()\n",
    "    normstrengthlist = np.array(list(strengths))\n",
    "    return np.sum(normstrengthlist)/len(G.nodes)\n",
    "\n",
    "  def sparser_graph(self, threshold):\n",
    "    new_matrix = self.data.copy()\n",
    "    new_matrix[new_matrix<=threshold] = 0\n",
    "    return FC_graph(new_matrix, self.region_info)\n",
    "\n",
    "  def closeness_centrality(self, node):\n",
    "    \n",
    "\n",
    "    # Computation of Closeness Centrality\n",
    "    closeness = nx.closeness_centrality(G, distance='distance')\n",
    "\n",
    "    # Now we add the closeness centrality value as an attribute to the nodes\n",
    "    nx.set_node_attributes(self.G, closeness, self.CLOSENESS)\n",
    "\n",
    "    # Closeness Centrality Histogram\n",
    "    sns.distplot(list(closeness.values()), kde=False, norm_hist=False)\n",
    "    plt.xlabel('Centrality Values')\n",
    "    plt.ylabel('Counts')\n",
    "\n",
    "  def betweenness_centrality(self):\n",
    "    betweenness = nx.betweenness_centrality(self.G, weight='distance', normalized=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0uaqk5vN-UW2"
   },
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "def get_subgraphs(region_info):\n",
    "  network_members = defaultdict(list)\n",
    "  for net, name in zip(region_info[\"network\"], region_info[\"name\"]):\n",
    "    network_members[net].append(name)\n",
    "\n",
    "  names = region_info[\"name\"]\n",
    "  print(network_members)\n",
    "  for region, subnet in network_members.items():\n",
    "    np.array([name in subnet for name in names]).nonzero()\n",
    "  \n",
    "get_subgraphs(region_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "73eGjClFZh5A"
   },
   "outputs": [],
   "source": [
    "fc_G = FC_graph(group_fc, region_info)\n",
    "\n",
    "fc_G.mean_degree()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jlFhngy2UkTq"
   },
   "source": [
    "## Load individual runs for a given task"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "b6_wbj3tM4wE"
   },
   "outputs": [],
   "source": [
    "print(os.listdir(f\"{HCP_DIR}/subjects/128/EVs/tfMRI_WM_RL/\"))\n",
    "!cat ./hcp/subjects/128/EVs/tfMRI_WM_RL/2bk_body.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "k-oxgXHKn8v4"
   },
   "source": [
    "Load working memory data for each subject"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "XaYkLCfcn8Oq"
   },
   "outputs": [],
   "source": [
    "task = \"wm\"\n",
    "conds = {'0bk': [\"0bk_body\", \"0bk_faces\", \"0bk_places\", \"0bk_tools\"],\n",
    "         '2bk': [\"2bk_body\", \"2bk_faces\", \"2bk_places\", \"2bk_tools\"]}\n",
    "\n",
    "N_CONDS = len(conds['2bk'])\n",
    "BLOCK_FRAMES = int(27.5/TR) # 27.5s is the duration of each block\n",
    "\n",
    "# intialize\n",
    "timeseries_task_wm = {}\n",
    "for l in ('0bk','2bk'):\n",
    "  timeseries_task_wm[l] = []\n",
    "\n",
    "for subject in range(N_SUBJECTS):\n",
    "\n",
    "  # Load full timeseries\n",
    "  timeseries = load_timeseries(subject=subject, name=task) # this is a 360, 810 numpy.ndarray\n",
    "  # Extract 2back timepoints \n",
    "  for l in ('0bk','2bk'):\n",
    "    evs = [load_evs(subject, task, cond) for cond in conds[l]]\n",
    "    ## Notes: evs is a list of 4 (sub)lists - 1 per condition\n",
    "    # Each sublist contains 2 dictionaries - 1 per run\n",
    "    # Each dictionary contains onset, duration, and amplitude keys\n",
    "\n",
    "    ts_block = np.zeros((N_PARCELS, N_CONDS*N_RUNS_TASK*BLOCK_FRAMES))\n",
    "    for i in range(N_CONDS):\n",
    "      for j in range(N_RUNS_TASK):\n",
    "        onset_frames = int(evs[i][j][\"onset\"]/TR) + j*FRAMES_PER_RUN\n",
    "        ts_block[:,(i*N_RUNS_TASK+j)*BLOCK_FRAMES:(i*N_RUNS_TASK+j + 1)*BLOCK_FRAMES] = timeseries[:,onset_frames:onset_frames+BLOCK_FRAMES]\n",
    "\n",
    "    # Concat new timeseries into timeseries_task_wm_2back\n",
    "\n",
    "    timeseries_task_wm[l].append(ts_block)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "f6XQc4JDOlEA"
   },
   "source": [
    "## Run a simple correlation-based \"functional connectivity\" analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QpQgzqh4MuoL"
   },
   "source": [
    "Generate a correlation matrix (showing \"functional connectivity\" or FC) for each subject and plot the group average:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "f_OdmN_wyDis"
   },
   "outputs": [],
   "source": [
    "fc_2bk = np.zeros((N_SUBJECTS, N_PARCELS, N_PARCELS))\n",
    "fc_0bk = np.zeros((N_SUBJECTS, N_PARCELS, N_PARCELS))\n",
    "for sub, ts in enumerate(timeseries_task_wm['2bk']):\n",
    "  fc_2bk[sub] = np.corrcoef(ts)\n",
    "for sub, ts in enumerate(timeseries_task_wm['0bk']):\n",
    "  fc_0bk[sub] = np.corrcoef(ts)\n",
    "\n",
    "group_fc_2bk = fc_2bk.mean(axis=0)\n",
    "plt.imshow(group_fc_2bk, interpolation=\"none\", cmap=\"bwr\", vmin=-1, vmax=1)\n",
    "plt.colorbar()\n",
    "plt.show()\n",
    "\n",
    "group_fc_0bk = fc_0bk.mean(axis=0)\n",
    "plt.imshow(group_fc_0bk, interpolation=\"none\", cmap=\"bwr\", vmin=-1, vmax=1)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hUBV9CGLNkZ9"
   },
   "source": [
    "Threshold the correlation matrix to produce a connectome, and plot it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "R4d_qhh1Npd-"
   },
   "outputs": [],
   "source": [
    "plotting.view_connectome(group_fc_2bk, atlas[\"coords\"], edge_threshold=\"99%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "n62NhqlitGoM"
   },
   "source": [
    "## Extract connectivity features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "-3L7hYwdaM1J"
   },
   "outputs": [],
   "source": [
    "#@title Graph Thresholding\n",
    "#@markdown Run this to get the thresholding functions! Main entrypoint is below, \n",
    "#@markdown use `help(graph_threshold)` for full description\n",
    "\n",
    "#@markdown `graph_threshold(input, numSurr)`\n",
    "#@markdown\n",
    "#@markdown Be sure to change the runtime to gpu to speed this up as much as possible! Pass in cupy arrays rather than numpy arrays.\n",
    "def graph_threshold(input, numSurr):\n",
    "  \"\"\"\n",
    "    Thresholds FC data using fourier transform surrogates. Pass in numpy or cupy \n",
    "    array. Array must be at least 2 dimensions: the second to last must be nodes\n",
    "    (e.g. atlas ROI), and the last must be the timecourse. The first\n",
    "    dimension(s) may be any sort of indexing (e.g. subjects, conditions, etc). \n",
    "\n",
    "    Note that using cupy arrays is more than 10 times as fast as using numpy \n",
    "    arrays. Be sure to enable GPU in colab.\n",
    "\n",
    "    Returns array of same type as input array (numpy vs cupy). Shape will \n",
    "    be the same as the input, with the exception of the last two dimensions,\n",
    "    which will contain the thresholded functional connectivity graphs\n",
    "\n",
    "    Args:\n",
    "    x (numpy/cupy array of floats with at least 2 dims): data to be thresholded\n",
    "    numSurr (scalar): Number of surrogates to calculate\n",
    "\n",
    "    Returns:\n",
    "    (numpy/cupy array of floats) : Functional connectivity graphs \n",
    "  \"\"\"\n",
    "  xp = get_array_mod(input)\n",
    "  index_dims = input.shape[:-2]\n",
    "  if len(index_dims) > 1:\n",
    "    # We put the single number inside a tuple\n",
    "    index_dims = ( func.reduce(op.mul, input.shape[:-2]) )\n",
    "  elif len(index_dims) == 0:\n",
    "    index_dims = ( 1, )\n",
    "  # Here, if index_dims is an empty tuple, it will not contribute anything to\n",
    "  # the shape (i.e. working_shape will be a 2d tuple)\n",
    "  shape = (*index_dims, *input.shape[-2:])\n",
    "  working_input = xp.reshape(input, shape)\n",
    "  results = xp.empty((*index_dims, *corrcoef_shape(input)))\n",
    "  for i, sample in enumerate(working_input):\n",
    "    results[i] = surrogate_threshold(sample, numSurr)\n",
    "  \n",
    "  return xp.reshape(results, (*input.shape[:-2], *corrcoef_shape(input)))\n",
    "\n",
    "\n",
    "def surrogate_threshold(input, numSurr):\n",
    "  xp = get_array_mod(input)\n",
    "  assert(len(input.shape) == 2)\n",
    "  fc_surr = xp.empty((numSurr, *corrcoef_shape(input)))\n",
    "  for i in range(numSurr):\n",
    "    surr = phase_randomize(input)\n",
    "    fc_surr[i] = xp.corrcoef(surr)\n",
    "\n",
    "  fc = xp.corrcoef(input)\n",
    "  cp.cuda.Device().synchronize()\n",
    "\n",
    "  if xp is cp:\n",
    "    fc = cp.asnumpy(fc)\n",
    "    fc_surr = cp.asnumpy(fc_surr)\n",
    "  pvals = sc.stats.mstats.ttest_1samp(fc_surr, fc, axis=0).pvalue\n",
    "  reject = two_d_multipletest(pvals)\n",
    "  fc[~reject] = 0\n",
    "  if xp is cp:\n",
    "    fc = cp.asarray(fc)\n",
    "  return fc\n",
    "\n",
    "\n",
    "def two_d_multipletest(pvals, method='fdr_bh'):\n",
    "  reject = sm.stats.multipletests(np.reshape(pvals, -1), method=method)[0]\n",
    "  return np.reshape(reject, pvals.shape)\n",
    "\n",
    "\n",
    "def phase_randomize(input):\n",
    "  xp = get_array_mod(input)\n",
    "  f_len = input.shape[-1]\n",
    "  # 1. Calculate the Fourier transform of the original signal.\n",
    "  f_transform = xp.fft.fft(input, f_len, axis=-1)\n",
    "  amplitudes = np.abs(f_transform)\n",
    "\n",
    "  # 2. Generate a vector of random phases (i.e. a random sequence of values in\n",
    "  #    the range [0, 2pi]) , with length L/2 , where L is the length of the time\n",
    "  #    series.\n",
    "  #    In this implementation, we make phases the same length as the transform,\n",
    "  #    then symmetrize the phases by setting the front half as equal to the \n",
    "  #    negative of the back half.\n",
    "  phases = xp.random.uniform(-xp.pi, xp.pi, input.shape)\n",
    "  phases[..., f_len//2:] = -phases[..., f_len//2:0:-1]\n",
    "  phases[..., 0] = 0\n",
    "\n",
    "  # 3. As the Fourier transform is symmetrical, to create the new phase \n",
    "  #    randomized vector, multiply the first half of F (i.e. the half\n",
    "  #    corresponding to the positive frequencies) by the phases to create the\n",
    "  #    first half of F_r. The remainder of F_r is then the horizontally flipped\n",
    "  #    complex conjugate of the first half. \n",
    "\n",
    "  phases_added = amplitudes * xp.exp(1j * phases)\n",
    "\n",
    "\n",
    "  # 4. Finally, the inverse Fourier transform F_r of gives the FT surrogate. \n",
    "  #    Specifying time_len (the length of our original matrix) automatically\n",
    "  #    pads the input array with 2 0s in each trial (as a result of the above\n",
    "  #    operations, the array has 2 fewer timepoints than our input)\n",
    "  return xp.real(xp.fft.ifft(phases_added, f_len))\n",
    "\n",
    "def corrcoef_shape(a):\n",
    "  assert(len(a.shape) > 1)\n",
    "  return (a.shape[-2], a.shape[-2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "03UvWa67EM7n"
   },
   "source": [
    "Function to calculate the node-wise functional connectivity summary features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "xmNoP8PrEKmy"
   },
   "outputs": [],
   "source": [
    "# Node-to-node connectivity\n",
    "def extract_connectivities(seed_rois, target_rois, fc, nSubj):\n",
    "  fc_summary = np.zeros((N_SUBJECTS,len(seed_rois),len(target_rois)))\n",
    "  for i_seed in range(len(seed_rois)):\n",
    "    seed_idx = region_info[\"name\"].index(seed_rois[i_seed])\n",
    "    for i_target in range(len(target_rois)):\n",
    "      target_idx = region_info[\"name\"].index(target_rois[i_target])\n",
    "      if target_idx == seed_idx:\n",
    "        continue \n",
    "      for i_subj in range(nSubj):\n",
    "        fc_summary[i_subj,i_seed,i_target] = fc[i_subj,seed_idx,target_idx]\n",
    "\n",
    "  return fc_summary\n",
    "\n",
    "# example to calculate right dlPFC to DAN\n",
    "#seed_rois = [\"R_9-46d\"]\n",
    "#target_rois = network_regions['Dorsal-atten']\n",
    "#fc_n2n = extract_connectivities(seed_rois, target_rois, fc, N_SUBJECTS)\n",
    "#fc_dlPFC_to_DAN = fc_n2n.mean(axis=2)    # average over all target nodes\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "epKJIeJfyZqH"
   },
   "source": [
    "### Graph Theory\n",
    "\n",
    "This is a work in progress :)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3oHPBwcxznLb"
   },
   "outputs": [],
   "source": [
    "fc = np.zeros((N_SUBJECTS, N_PARCELS, N_PARCELS))\n",
    "for sub, ts in enumerate(timeseries_rest):\n",
    "  fc[sub] = np.corrcoef( ts)\n",
    "\n",
    "group_fc = fc.mean(axis=0)\n",
    "group_fc_nan = np.copy(group_fc)\n",
    "np.fill_diagonal(group_fc_nan, np.nan)\n",
    "\n",
    "fc_matrix = pd.DataFrame(group_fc_nan)\n",
    "fc_matrix.columns = region_info[\"name\"]\n",
    "fc_matrix.index = region_info[\"name\"]\n",
    "fc_matrix = fc_matrix.sort_index(0).sort_index(0)\n",
    "\n",
    "plt.imshow(fc_matrix, interpolation=\"none\", cmap=\"bwr\", vmin=-1, vmax=1)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "rGSMRTH6291f"
   },
   "outputs": [],
   "source": [
    "group_fc = abs(group_fc)\n",
    "group_fc_nan = abs(group_fc_nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "h7AsgNeX3IvQ"
   },
   "outputs": [],
   "source": [
    "bins = np.arange(np.sqrt(len(np.concatenate(group_fc))))\n",
    "bins = (bins - np.min(bins))/np.ptp(bins)\n",
    "fig, axes = plt.subplots(1,2, figsize=(15,5))\n",
    "\n",
    "rawdist = sns.distplot(group_fc_nan.flatten(), bins=bins, kde=False, ax=axes[0], norm_hist=True)\n",
    "rawdist.set(xlabel='Correlation Values', ylabel = 'Density Frequency')\n",
    "\n",
    "log10dist = sns.distplot(np.log10(group_fc_nan).flatten(), kde=False, ax=axes[1], norm_hist=True)\n",
    "log10dist.set(xlabel='log(weights)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PFS04-5sQDyz"
   },
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "def make_subgraphs(np_matrix, region_info):\n",
    "  network_members = defaultdict(list)\n",
    "  for net, name in zip(region_info[\"network\"], region_info[\"name\"]):\n",
    "    network_members[net].append(name)\n",
    "\n",
    "\n",
    "class FC_graph:\n",
    "\n",
    "  # Nodal properties\n",
    "  WEIGHT = \"weight\"\n",
    "  STRENGTH = \"strength\"\n",
    "  STRENGTHNORM = \"strengthnorm\"\n",
    "  DISTANCE = \"distance\"\n",
    "  CLOSENESS = \"closeness\"\n",
    "  \n",
    "  def __init__(self, np_matrix, region_info):\n",
    "    self.data = np_matrix\n",
    "    self.G = self._prepare_graph(np_matrix, region_info[\"name\"])\n",
    "    self.region_info = region_info\n",
    "    self.names = self.region_info[\"name\"]\n",
    "    self.networks = self.region_info[\"network\"]\n",
    "\n",
    "    # Compute subgraphs\n",
    "    network_members = defaultdict(list)\n",
    "    for net, name in zip(region_info[\"network\"], region_info[\"name\"]):\n",
    "      network_members[net].append(name)\n",
    "    self.sub_G = { net: self.G.subgraph(members).copy()\n",
    "                     for net, members in network_members.items() }\n",
    "\n",
    "    self._compute_graph_attributes(self.G)\n",
    "    [self._compute_graph_attributes(G) for G in self.sub_G.values()]\n",
    "\n",
    "  def _prepare_graph(self, np_matrix, names):\n",
    "    G = nx.from_numpy_matrix(np_matrix)\n",
    "    G.remove_edges_from(list(nx.selfloop_edges(G)))\n",
    "    G = nx.relabel_nodes(G, dict(enumerate(names)))\n",
    "\n",
    "  def _compute_graph_attributes(self, G):\n",
    "    self._compute_degree(G)\n",
    "    self._compute_distance(G)\n",
    "\n",
    "  def _compute_degree(self, G):\n",
    "    strength = G.degree(weight=self.WEIGHT)\n",
    "    strengths = dict(strength)\n",
    "    nx.set_node_attributes(G, strengths, self.STRENGTH) # Add as nodal attribute\n",
    "\n",
    "    # Normalized node strength values 1/N-1\n",
    "    normstrenghts = {node: val * 1/(len(G.nodes)-1) for (node, val) in strength}\n",
    "    nx.set_node_attributes(G, normstrenghts, self.STRENGTHNORM)\n",
    "  \n",
    "  def _compute_distance(self, G):\n",
    "    # The function accepts a argument 'distance' that, in correlation-based \n",
    "    # networks, must be seen as the inverse of the weight value. Thus, a high\n",
    "    # correlation value (e.g., 0.8) means a shorter distance (i.e., 0.2).\n",
    "    G_distance_dict = {(e1, e2): 1 / abs(weight) for e1, e2, weight in G.edges(data=self.WEIGHT)}\n",
    "\n",
    "    # Then add them as attributes to the graph edges\n",
    "    nx.set_edge_attributes(self.G, G_distance_dict, self.DISTANCE)\n",
    "\n",
    "\n",
    "  def _node_subnet(self, node):\n",
    "    return dict(zip(self.names, self.networks))[node]\n",
    "\n",
    "  def get_subgraphs(self, region_info):\n",
    "    network_members = defaultdict(list)\n",
    "    for net, name in zip(region_info[\"network\"], region_info[\"name\"]):\n",
    "      network_members[net].append(name)\n",
    "\n",
    "    names = np.array(region_info[\"name\"])\n",
    "    for region in network_members:\n",
    "      indices = np.where(names in )\n",
    "    \n",
    "    return = { net: self.G.subgraph(members).copy()\n",
    "                     for net, members in network_members.items() }\n",
    "\n",
    "\n",
    "\n",
    "  def node_degree(self, node, subnet=False):\n",
    "    G = self._node_subnet(node) if subnet else self.G\n",
    "    return nx.get_node_attributes(G, self.STRENGTHNORM)[node]\n",
    "\n",
    "  def mean_degree(self, subnet=None):\n",
    "    G = subnet if subnet else self.G\n",
    "    strengths = nx.get_node_attributes(G, self.STRENGTHNORM).values()\n",
    "    normstrengthlist = np.array(list(strengths))\n",
    "    return np.sum(normstrengthlist)/len(G.nodes)\n",
    "\n",
    "  def sparser_graph(self, threshold):\n",
    "    new_matrix = self.data.copy()\n",
    "    new_matrix[new_matrix<=threshold] = 0\n",
    "    return FC_graph(new_matrix, self.region_info)\n",
    "\n",
    "  def closeness_centrality(self, node):\n",
    "    \n",
    "\n",
    "    # Computation of Closeness Centrality\n",
    "    closeness = nx.closeness_centrality(G, distance='distance')\n",
    "\n",
    "    # Now we add the closeness centrality value as an attribute to the nodes\n",
    "    nx.set_node_attributes(self.G, closeness, self.CLOSENESS)\n",
    "\n",
    "    # Closeness Centrality Histogram\n",
    "    sns.distplot(list(closeness.values()), kde=False, norm_hist=False)\n",
    "    plt.xlabel('Centrality Values')\n",
    "    plt.ylabel('Counts')\n",
    "\n",
    "  def betweenness_centrality(self):\n",
    "    betweenness = nx.betweenness_centrality(self.G, weight='distance', normalized=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0uaqk5vN-UW2"
   },
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "def get_subgraphs(region_info):\n",
    "  network_members = defaultdict(list)\n",
    "  for net, name in zip(region_info[\"network\"], region_info[\"name\"]):\n",
    "    network_members[net].append(name)\n",
    "\n",
    "  names = region_info[\"name\"]\n",
    "  print(network_members)\n",
    "  for region, subnet in network_members.items():\n",
    "    np.array([name in subnet for name in names]).nonzero()\n",
    "  \n",
    "get_subgraphs(region_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "73eGjClFZh5A"
   },
   "outputs": [],
   "source": [
    "fc_G = FC_graph(group_fc, region_info)\n",
    "\n",
    "fc_G.mean_degree()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "V7CFJqS55CUP"
   },
   "outputs": [],
   "source": [
    "G = nx.from_numpy_matrix(group_fc)\n",
    "G.remove_edges_from(list(nx.selfloop_edges(G)))\n",
    "G = nx.relabel_nodes(G, dict(enumerate(region_info[\"name\"])))\n",
    "print(G.nodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "2of8X-IS7IO_"
   },
   "outputs": [],
   "source": [
    "# Betweenness centrality:\n",
    "#print(nx.betweenness_centrality.__doc__)\n",
    "betweenness = nx.betweenness_centrality(G, weight='distance', normalized=True) \n",
    "                                                              "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jMVfZEob8e0e"
   },
   "outputs": [],
   "source": [
    "# Now we add the it as an attribute to the nodes\n",
    "#nx.set_node_attributes(G, betweenness, 'bc')\n",
    "\n",
    "# Visualise  values directly\n",
    "#print(betweenness)\n",
    "\n",
    "# Betweenness centrality Histogram\n",
    "sns.distplot(list(betweenness.values()), kde=False)\n",
    "plt.xlabel('Centrality Values')\n",
    "plt.ylabel('Counts')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "LuUtiDBk7bJ3"
   },
   "outputs": [],
   "source": [
    "# Path Length\n",
    "#print(nx.shortest_path_length.__doc__)\n",
    "\n",
    "# This is a versatile version of the ones below in which one can define or not source and target. Remove the hashtag to use this version.\n",
    "#list(nx.shortest_path_length(G, weight='distance'))\n",
    "\n",
    "# This one can also be used if defining source and target: \n",
    "#print(nx.dijkstra_path_length.__doc__)\n",
    "#nx.dijkstra_path_length(G, source=20, target=25, weight='distance')\n",
    "\n",
    "# Whereas this one is for all pairs. Remove the hashtag to use this version.\n",
    "#print(nx.all_pairs_dijkstra_path_length.__doc__)\n",
    "list(nx.all_pairs_dijkstra_path_length(G, weight='distance'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "BVl6hfTF879H"
   },
   "outputs": [],
   "source": [
    "# Average Path Length or Characteristic Path Length\n",
    "#print(nx.average_shortest_path_length.__doc__)\n",
    "nx.average_shortest_path_length(G, weight='distance')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "p87DDO5u9agi"
   },
   "outputs": [],
   "source": [
    "# Modularity\n",
    "#print(community.best_partition.__doc__)\n",
    "#from community import best_partition\n",
    "part = community.best_partition(G, weight='weight')\n",
    "\n",
    "# Visualise values directly\n",
    "#print(part)\n",
    "\n",
    "# Check the number of communities\n",
    "set(part.values()).union()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kmxNKtGFxmgx"
   },
   "source": [
    "# Behavioral covariates\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XgnYw0oxYOtB"
   },
   "source": [
    "## Task performance measures\n",
    "\n",
    "The dataset also includes aggregate behavior for each task run stored in task-specific `.csv` files. It is possible to load and work with these files using `numpy`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "_PxLSdGYXfen"
   },
   "outputs": [],
   "source": [
    "wm_behavior = np.genfromtxt(\"hcp/behavior/wm.csv\",\n",
    "                            delimiter=\",\",\n",
    "                            names=True,\n",
    "                            dtype=None,\n",
    "                            encoding=\"utf\")\n",
    "\n",
    "# Make separate dataframes for 0 and 2 back performance measures\n",
    "back0_array = (wm_behavior[np.where((wm_behavior[\"ConditionName\"] == \"0BK_BODY\") | (wm_behavior[\"ConditionName\"] == \"0BK_FACE\") | (wm_behavior[\"ConditionName\"] == \"0BK_TOOL\") | (wm_behavior[\"ConditionName\"] == \"0BK_PLACE\"))])\n",
    "back2_array = (wm_behavior[np.where((wm_behavior[\"ConditionName\"] == \"2BK_BODY\") | (wm_behavior[\"ConditionName\"] == \"2BK_FACE\") | (wm_behavior[\"ConditionName\"] == \"2BK_TOOL\") | (wm_behavior[\"ConditionName\"] == \"2BK_PLACE\"))])\n",
    "back0_df = pd.DataFrame(back0_array)\n",
    "back2_df = pd.DataFrame(back2_array)\n",
    "\n",
    "# Make dataframes with 1 performance score per subject (averaged across runs)\n",
    "back0_mean = back0_df.groupby('Subject').mean()\n",
    "back2_mean = back2_df.groupby('Subject').mean()\n",
    "\n",
    "# Concat 0 and 2 back dataframes\n",
    "wm_behavior_byBlock = pd.concat([back0_mean, back2_mean], keys=['0back', '2back'])\n",
    "\n",
    "# Average by subject and run\n",
    "#back0_df.groupby(['Subject', 'Run']).mean()\n",
    "#back2_df.groupby(['Subject', 'Run']).mean()\n",
    "\n",
    "# Accuracy Mean and standard deviation \n",
    "print(\"0 back Accuracy; mean SD\")\n",
    "print(round(back0_mean[\"ACC\"].mean(), 2), round(back0_mean[\"ACC\"].std(),2 ))\n",
    "print(\"2 back Accuracy; mean SD\")\n",
    "print(round(back2_mean[\"ACC\"].mean(),2), round(back2_mean[\"ACC\"].std(),2))\n",
    "\n",
    "# RT Mean and standard deviation \n",
    "print(\"0 back MEDIAN_RT; mean SD\")\n",
    "print(round(back0_mean[\"MEDIAN_RT\"].mean(), 2), round(back0_mean[\"MEDIAN_RT\"].std(),2 ))\n",
    "print(\"2 back MEDIAN_RT; mean SD\")\n",
    "print(round(back2_mean[\"MEDIAN_RT\"].mean(), 2), round(back2_mean[\"MEDIAN_RT\"].std(),2 ))\n",
    "\n",
    "# Histograms\n",
    "#back0_mean.hist(bins=20)\n",
    "#back2_mean.hist(bins=20)\n",
    "hist_acc_0 = back0_mean[\"ACC\"].hist(bins=20, color = \"blue\", alpha=0.3)\n",
    "hist_acc_2 = back2_mean[\"ACC\"].hist(bins=20, color = \"red\", alpha=0.3)\n",
    "\n",
    "hist_rt_0 = back0_mean[\"MEDIAN_RT\"].hist(bins=20, color = \"green\", alpha=0.3)\n",
    "hist_rt_2 = back2_mean[\"MEDIAN_RT\"].hist(bins=20, color = \"yellow\", alpha=0.3)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "R6UJ63g9WqFH"
   },
   "source": [
    "## Pseudo-demographics\n",
    "\n",
    "The NMA-distributed version of the HCP data does not contain any real demographic information. But we have created a synthetic dataset of 25 \"demographic\" variables based on a model trained on the original dataset to predict demographics from resting-state network organization measures:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "JEbatTiEWvtC"
   },
   "outputs": [],
   "source": [
    "demo = np.load(\"hcp/pseudo_demographics.npy\")\n",
    "demo.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6HCgSp9nXB7r"
   },
   "source": [
    "## Original subject IDs\n",
    "\n",
    "The dataset also contains a key to map the ordinal subject numbers to the IDs used in the original HCP dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "gsd1CjXAXLB5"
   },
   "outputs": [],
   "source": [
    "ids = np.loadtxt(\"hcp/orig_ids.txt\")\n",
    "print(ids[:8])"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [
    "ZDFPnQ07MmEd",
    "qQzCA99sMryW"
   ],
   "include_colab_link": true,
   "name": "load_chp.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
